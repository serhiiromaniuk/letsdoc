// package backend

// import (
// 	"time"
// 	"net/http"
// 	// === Error handling
// 	"github.com/go-sql-driver/mysql"
// 	// ===
// 	"letsdoc/server/internal/database"

// 	"github.com/gin-gonic/gin"
// 	"gorm.io/gorm"

// 	"fmt"
// 	"strings"

// 	"github.com/aws/aws-sdk-go/aws"
// 	"github.com/aws/aws-sdk-go/aws/session"
// 	"github.com/aws/aws-sdk-go/service/route53"
// )

// func userDomainsUpsert(c *gin.Context) {
// 	var req database.UserDomains
// 	if err := c.ShouldBindJSON(&req); err != nil {
// 		c.JSON(http.StatusBadRequest, errorHandler(err))
// 	}

// 	zoneId := getZone()
// 	params := &route53.ChangeResourceRecordSetsInput{
// 		ChangeBatch: &route53.ChangeBatch{
// 			Changes: []*route53.Change{
// 				{
// 					Action: aws.String("UPSERT"),
// 					ResourceRecordSet: &route53.ResourceRecordSet{
// 						Name: aws.String(req.Name),   
// 						Type: aws.String("CNAME"),
// 						ResourceRecords: []*route53.ResourceRecord{
// 							{
// 								Value: aws.String(req.Name),
// 							},
// 						},
// 						TTL:  aws.Int64(int64(300)),
// 					},
// 				},
// 			},
// 			Comment: aws.String("Sample update"),
// 		},
// 		HostedZoneId: aws.String(zoneId),
// 	}
// 	resp, err := svc.ChangeResourceRecordSets(params)

// 	if err != nil {
// 		c.JSON(http.StatusForbidden, gin.H{"error": err})
// 		return nil
// 	}

// 	arg := database.UserDomains{
// 		Owner: req.UserName,
// 		Name:  req.Name,
// 	}

// 	db.Transaction(func(tx *gorm.DB) error {
// 		if err := tx.Create(&arg).Error; err != nil {
// 			if err.(*mysql.MySQLError).Number == 1062 {
// 				c.JSON(http.StatusForbidden, gin.H{"error": "already registered"})
// 			}
// 			return err
// 		} else {
// 			c.JSON(http.StatusOK, userDomainsUpsertResponse(arg))
// 			return nil
// 		}
// 	})
// }

// func userDomainsUpsertResponse(i database.userDomains) customUserDomainsUpsertResponse {
// 	return customUserDomainsUpsertResponse{
// 		Owner:     i.Owner,
// 		Name:      i.UserName,
// 		CreatedAt: i.CreatedAt,
// 	}
// }

// type customUserDomainsUpsertResponse struct {
// 	Owner	  string 	`json:"owner"`
// 	Name  	  string    `json:"name"`
// 	CreatedAt time.Time `json:"created_at"`
// }

// func getStatus(change *route53.ChangeResourceRecordSetsOutput) {
// 	input := &route53.GetChangeInput{
// 		Id: change.ChangeInfo.Id,
// 	}

// 	resp, _ := svc.GetChange(input)
// 	fmt.Println(resp)
// }
